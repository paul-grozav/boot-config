# ============================================================================ #
# Author: Tancredi-Paul Grozav <paul@grozav.info>
# ============================================================================ #
name: Build .iso

# Triggers the workflow on push to the 'main' branch
on:
  schedule:
  # First minute of every month
  - cron: '0 0 1 * *'
  push:
    branches:
    - main
    paths:
    - .github/workflows/build_iso.yml
    - ci/build_iso.sh
    - ci/embedded.ipxe
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. However, do NOT cancel in-progress runs as we
# want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

env:
  LC_ALL: C.UTF-8

jobs:
  # Build job
  build:
    # runs-on: self-hosted
    # Uses a free GitHub runner
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
    # Must install git before checkout, otherwise .git folder is missing and
    # will just use REST API (download .zip of repo)
    - name: Install tools
      run: |
        set -x &&
        apk add --no-cache \
          ` # tar - to create the artifact ` \
          tar \
          &&
        true
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build .iso file
      run: sh ci/build_iso.sh
    - name: Create new release with ISO
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag="iso-$(date +%Y%m%d%H%M)"
        gh release create "${tag}" ./http/ipxe.iso \
          --title "ISO build ${tag}" \
          --notes "Automated ISO build at $(date -u)"

    - name: Delete old releases (keep latest 3)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release list --limit 100 --json tagName,createdAt \
          --jq 'sort_by(.createdAt) | reverse | .[3:] | .[].tagName' |
          while read tag
          do
            echo "Deleting old release: ${tag}"
            gh release delete "${tag}" --yes
            git tag -d "${tag}" || true
            git push origin ":refs/tags/${tag}" || true
          done
# ============================================================================ #
