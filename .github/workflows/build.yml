# ============================================================================ #
# Author: Tancredi-Paul Grozav <paul@grozav.info>
# ============================================================================ #
name: Build

# Triggers the workflow on push to the 'main' branch
on:
  push:
    # paths:
    # - 'ci/build.sh'
    # - 'ci/embedded.ipxe'
    branches:
    - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. However, do NOT cancel in-progress runs as we
# want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

env:
  LC_ALL: C.UTF-8

jobs:
  # Build job
  build:
    # runs-on: self-hosted
    # Uses a free GitHub runner
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
    # Must install git before checkout, otherwise .git folder is missing and
    # will just use REST API (download .zip of repo)
    - name: Install tools
      run: |
        set -x &&
        apk add --no-cache \
          ` # tar - to create the artifact ` \
          tar \
          ` # git - clone ipxe project ` \
          git \
          &&
        git --version &&
        true
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # Fetches the entire history for git diff - not a shallow clone
        fetch-depth: 0
    - name: Setup Pages
      uses: actions/configure-pages@v5
    - name: Detect if build.sh has changed
      id: changes
      run: |
        set -x &&
        # if git diff-tree --no-commit-id --name-only -r ${{ github.sha }} |
        #   grep "^ci/build_iso.sh$\|^ci/embedded.ipxe$"
        if git diff --exit-code ${{ github.event.before }} ${{ github.sha }} \
          -- 'ci/build_iso.sh'
        then
          echo "rebuild=false" >> ${GITHUB_OUTPUT}
        else
          echo "rebuild=true" >> ${GITHUB_OUTPUT}
        fi
    - name: Build web app
      if: steps.changes.outputs.rebuild == 'true'
      run: sh ci/build_iso.sh
    - name: Upload new ISO as an artifact
      if: steps.changes.outputs.rebuild == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: latest-iso
        path: ipxe/src/bin/ipxe.iso
    - name: Download latest ISO artifact
      uses: actions/download-artifact@v4
      with:
        name: latest-iso
        path: http
    - name: Upload static files as artifact
      id: deployment
      uses: actions/upload-pages-artifact@v4
      with:
        path: http
        retention-days: 1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Uses a free GitHub runner
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
# ============================================================================ #
